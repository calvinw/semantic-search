```{python}
import pandas as pd
from sentence_transformers import SentenceTransformer
import numpy as np
import pickle
import torch
from sklearn.metrics.pairwise import cosine_similarity
from IPython.display import display, HTML, Markdown
from typing import Tuple, List
import textwrap
```

```{python}
model = SentenceTransformer('all-MiniLM-L6-v2', device="cpu")

image_path = "https://github.com/calvinw/semantic-search/blob/main/images/"
pkl_url = 'combined_embeddings.pkl'
pkl_url = "https://github.com/calvinw/semantic-search/raw/refs/heads/main/combined_embeddings.pkl"

def load_embeddings() -> pd.DataFrame:
    """Load embeddings from pickle file and return as DataFrame."""
    with open('combined_embeddings.pkl', 'rb') as f:
        data = pickle.load(f)
    return pd.DataFrame(data)

def format_result(rank: int, article_id: str, text: str, similarity: float) -> str:
    """Format a single search result with markdown styling."""
    # Wrap text for better readability
    wrapped_text = textwrap.fill(text, width=80)
    
    return f"""
### Match #{rank} (Similarity: {similarity:.2%})
**Article ID:** `{article_id}`

**Description:**
{wrapped_text}
"""

def semantic_search(
    query: str, 
    data: pd.DataFrame, 
    model: SentenceTransformer, 
    top_n: int = 5
) -> Tuple[pd.DataFrame, np.ndarray]:
    """
    Perform semantic search on the dataset.
    
    Args:
        query: Search query string
        data: DataFrame containing embeddings and metadata
        model: SentenceTransformer model
        top_n: Number of top results to return
    
    Returns:
        Tuple of (results DataFrame, similarity scores)
    """
    query_embedding = model.encode([query])
    similarities = cosine_similarity(query_embedding, list(data['combined_embeddings']))[0]
    top_indices = similarities.argsort()[-top_n:][::-1]
    return data.iloc[top_indices], similarities[top_indices]

def display_search_results(query: str, results: pd.DataFrame, similarities: np.ndarray):
    """Display search results in a formatted way using IPython display."""
    display(Markdown(f"## Search Results for: '{query}'"))
    
    for idx, (_, row) in enumerate(results.iterrows()):
        result_text = format_result(
            rank=idx + 1,
            article_id=row['article_id'],
            text=row['combined_text'],
            similarity=similarities[idx]
        )
        display(Markdown(result_text))

# Example usage
def run_example_searches():
    """Run example searches with improved formatting."""
    # Load data
    print("Loading embeddings...")
    data = load_embeddings()
    print(f"Loaded {len(data)} items\n")
    
    # Example queries
    queries = [
        "A comfortable dress for casual wear with pockets.",
        "Elegant long black dress for an evening event.",
        "A cozy winter dress with long sleeves and a hood.",
        "A sleeveless summer dress in green color.",
        "A sporty striped dress that is light and easy to move in."
    ]
    
    # Run searches
    for query in queries:
        results, similarities = semantic_search(query, data, model, top_n=5)
        display_search_results(query, results, similarities)
        display(Markdown("---\n"))  # Add separator between queries
``` 

```{python}
run_example_searches()
```
