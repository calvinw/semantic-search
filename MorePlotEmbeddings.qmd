---
title: "More Plotting Embeddings and Heatmaps"
---

## More Plotting Embeddings and Heatmaps

First, we'll import the necessary libraries and create functions to plot
embeddings and heatmaps for some examples


```{python}
from sentence_transformers import SentenceTransformer
from sklearn.decomposition import PCA
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
import seaborn as sns
import numpy as np

def plot_embedding(phrases, num_clusters):
    # Load the model
    model = SentenceTransformer('all-MiniLM-L6-v2')

    # Generate embeddings
    embeddings = model.encode(phrases)

    # Reduce to 2 dimensions using PCA
    pca = PCA(n_components=2)
    embeddings_2d = pca.fit_transform(embeddings)

    # Perform clustering using KMeans
    kmeans = KMeans(n_clusters=num_clusters, random_state=42)
    cluster_labels = kmeans.fit_predict(embeddings)

    # Plot the 2D embeddings with clusters
    plt.figure(figsize=(10, 8))
    colors = ['red', 'blue', 'green', 'purple']
    for i, (x, y) in enumerate(embeddings_2d):
        plt.scatter(x, y, color=colors[cluster_labels[i]], label=f"Cluster {cluster_labels[i]}" if f"Cluster {cluster_labels[i]}" not in plt.gca().get_legend_handles_labels()[1] else "")
        plt.text(x + 0.02, y, phrases[i], fontsize=9)

    plt.title("2D Visualization of Sentence Embeddings with Clustering")
    plt.xlabel("PCA Dimension 1")
    plt.ylabel("PCA Dimension 2")
    plt.legend(loc='best', fontsize=8)
    plt.grid(True)
    plt.axis('equal')
    plt.show()

    return embeddings, cluster_labels

def plot_heatmap(phrases, embeddings, cluster_labels):
    # Calculate cosine similarity matrix
    similarity_matrix = np.inner(embeddings, embeddings)

    # Create a DataFrame for the heatmap
    import pandas as pd
    df = pd.DataFrame(similarity_matrix, index=phrases, columns=phrases)

    # Sort the DataFrame by cluster labels
    sorted_indices = np.argsort(cluster_labels)
    df = df.iloc[sorted_indices, sorted_indices]

    # Plot the heatmap
    plt.figure(figsize=(12, 10))
    sns.heatmap(df, cmap='YlOrRd', annot=False)
    plt.title("Cosine Similarity Heatmap (Sorted by Clusters)")
    plt.tight_layout()
    plt.show()

```

Next, we'll apply these functions to our examples. You are to dream up some
examples using either you imagination or a chatbot.

## Example 1: 4 Sentences Similar, 1 Sentence Different 

### Embeddings for Example 1 

Fill in the CODE below with your 5 sentences

```{python}
#| eval: false
# Simple Phrases
phrases = [
   CODE
]

embeddings, cluster_labels = plot_embedding(phrases, 2)
```

### HeatMap for Example 1 

```{python}
#| eval: false
plot_heatmap(phrases, embeddings, cluster_labels)
```

## Example 2: Invent 3 items each for 2 different categories 

### Embeddings for Example 2

Fill in the CODE below with your 6 sentences

```{python}
#| eval: false
phrases = [
   CODE
]

embeddings, cluster_labels = plot_embedding(phrases, 2)
```

### Heatmap for Example 2 

```{python}
#| eval: false
plot_heatmap(phrases, embeddings, cluster_labels)
```

## Example 3: 5 items each for 3 different categories 

### Embeddings for Example 3 

Fill in the CODE below with your 15 sentences

```{python}
#| eval: false
phrases = [
   CODE
]


embeddings, cluster_labels = plot_embedding(phrases, 3)
```

### Heatmap for Example 3 

```{python}
#| eval: false
plot_heatmap(phrases, embeddings, cluster_labels)
```

