
---
title: "Small Similarity Example"
---


We will look at the similarities between 3 sentences:

- "I like to be in my house", 
- "I enjoy staying home", 
- "The isotope 238u decays to 206pb"

First we compute the similarities between them 

```{python}
import torch
from sentence_transformers import SentenceTransformer
from sklearn.metrics.pairwise import cosine_similarity
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import textwrap

# Define our texts
texts = ["I like to be in my house", 
         "I enjoy staying home", 
         "The isotope 238u decays to 206pb"]

# Check if GPU is available and use it if possible
device = 'cuda' if torch.cuda.is_available() else 'cpu'
print(f"Using {device} for inference.")

# Load the model
model = SentenceTransformer('all-MiniLM-L6-v2', device=device)

# Generate embeddings
embeddings = model.encode(texts)

# Compute pairwise similarities
similarities = cosine_similarity(embeddings)
print(similarities)
print(embeddings)
```

## The embedding for 'I like to be in my house'

```{python}
print("This is the embedding for 'I like to be in my house'")
print(embeddings[0])
```

## The embedding for 'I enjoy staying home'

```{python}
print("This is the embedding for 'I enjoy staying home'")
print(embeddings[1])
```

## The embedding for 'The isotope 238 decays to 206pb'

```{python}
print("This is the embedding for 'The isotope 238 decays to 206pb'")
print(embeddings[2])
```

## Now we create a heatmap that shows the similairities

```{python}
# Create a heatmap
plt.figure(figsize=(8, 8))
ax = sns.heatmap(similarities, annot=True, cmap='Blues', vmin=0, vmax=1, square=True)

# Remove x-axis ticks
ax.set_xticks([])

# Set y-axis tick labels with wrapping
wrapped_texts = ['\n'.join(textwrap.wrap(text, width=20)) for text in texts]
ax.set_yticks(np.arange(len(texts)) + 0.5)
ax.set_yticklabels(wrapped_texts, rotation=0, ha='right')

# Add wrapped x-axis labels at the bottom
ax.set_xlabel('')
plt.xticks([])
for i, text in enumerate(texts):
    wrapped_text = '\n'.join(textwrap.wrap(text, width=20))
    plt.text(i + 0.5, len(texts) + 0.1, wrapped_text,
             horizontalalignment='center',
             verticalalignment='bottom',
             rotation=0,
             fontsize=10)

# Adjust the bottom margin to accommodate wrapped labels
plt.title('Sentence Similarities')
plt.tight_layout()
plt.subplots_adjust(bottom=0.2)  # Increase bottom margin
plt.show()
```
